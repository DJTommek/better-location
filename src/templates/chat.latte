{templateType App\Web\Chat\ChatTemplate}
{layout '@layout.latte'}
{block content}
	<div id="content-chat-settings">
		<h2 class="text-center"><a href="{$basePath}/chat/{$chatResponse->id}">Chat settings</a></h2>
		<form method="POST" class="row">
			<div class="col-lg">
				<table class="table">
					<tbody>
					<tr>
						<td>Chat ID</td>
						<td>{$chatResponse->id}</td>
					</tr>
					<tr>
						<td>Chat type</td>
						<td>{$chatResponse->type}</td>
					</tr>
					<tr>
						<td>Chat title</td>
						<td>{$chat->getTelegramChatName()}</td>
					</tr>
					<tr>
						<td><label class="form-check-label" for="settings-map-preview">Show static map image</label></td>
						<td>
							<div class="form-check form-switch">
								<input class="form-check-input" type="checkbox" role="switch" id="settings-map-preview" name="map-preview" n:attr="checked: $chat->settingsPreview()">
							</div>
						</td>
					</tr>
					<tr>
						<td><label class="form-check-label" for="settings-address">Show address</label></td>
						<td>
							<div class="form-check form-switch">
								<input class="form-check-input" type="checkbox" role="switch" id="settings-show-address" name="show-address" n:attr="checked: $chat->settingsShowAddress()">
							</div>
						</td>
					</tr>
					<tr>
						<td>
							<label class="form-check-label" for="settings-try-load-ingress-portal">
								Try load
								<a href="https://ingress.com/" target="_blank" title="Ingress geolocation mobile game placed in real world.">Ingress portal</a>
							</label>
						</td>
						<td>
							<div class="form-check form-switch">
								<input class="form-check-input" type="checkbox" role="switch" id="settings-try-load-ingress-portal" name="try-load-ingress-portal" n:attr="checked: $chat->settingsTryLoadIngressPortal()">
							</div>
							<div class="form-text">
								<p>
									Try to load Ingress portal data for each location. If portal is found at these coordinates, description like this
									(<a href="{$basePath}/img/message-try-load-ingress-portal.png" target="_blank" title="Screenshot of message in chat where try load Ingress portal is enabled">example</a>)
									will be appended to the message:<br>
									Ingress portal:
									<a href="https://link.ingress.com/?link=https%3A%2F%2Fintel.ingress.com%2Fportal%2F3f45fb115df8449686cf6826073ec1f0.12&apn=com.nianticproject.ingress&isi=576505181&ibi=com.google.ingress&ifl=https%3A%2F%2Fapps.apple.com%2Fapp%2Fingress%2Fid576505181&ofl=https%3A%2F%2Fintel.ingress.com%2Fintel%3Fpll%3D50.087805%2C14.421160" target="_blank">Jan Hus Monument ðŸ“±</a>
									<a href="https://intel.ingress.com/intel?pll=50.087805,14.421160" target="_blank">ðŸ–¥</a>
									<a href="https://lh3.googleusercontent.com/FZXlrGIcPc1tKr5KeudSrAO7NQBZxGv4hJzLZuhR3ysx2YvfEwjLA485u8V2p3Ecg-47y1yjKneEyXUi1qyAl7T9v50=s10000" target="_blank">ðŸ–¼</a>
								</p>
								<p>
									If source input is Ingress-related link
									(<a href="https://intel.ingress.com/">Intel portal</a>,
									<a href="https://bannergress.com/" target="_blank">Bannergress mosaics</a>
									or <a href="https://play.google.com/store/apps/details?id=com.nianticproject.ingress" target="_blank">Ingress Prime</a>)
									portal info visible, even if this option is disabled.
								</p>
							</div>
						</td>
					</tr>
					<tr>
						<td>Message output type</td>
						<td>
							<div class="form-check">
								{var $outputTypeKey = App\Repository\ChatEntity::OUTPUT_TYPE_MESSAGE}
								{var $elementId = 'output-type-' . $outputTypeKey}
								<input class="form-check-input" type="radio" name="output-type" id="{$elementId}" n:attr="checked: $outputTypeKey === $chat->settingsOutputType()">
								<label class="form-check-label" for="{$elementId}">
									Message
									<span class="form-text">
										(Rich text and buttons, default recommended,
										<a href="{$basePath}/img/message-output-type-message.png" target="_blank" title="Screenshot from chat with message output type">example</a>)
									</span>
								</label>
							</div>
							<div class="form-check">
								{var $outputTypeKey = App\Repository\ChatEntity::OUTPUT_TYPE_LOCATION}
								{var $elementId = 'output-type-' . $outputTypeKey}
								<input class="form-check-input" type="radio" name="output-type" value="{$outputTypeKey}" id="{$elementId}" n:attr="checked: $outputTypeKey === $chat->settingsOutputType()">
								<label class="form-check-label" for="{$elementId}">
									Native location
									<span class="form-text">
										(Clean location with buttons, no text,
										<a href="{$basePath}/img/message-output-type-native-location.png" target="_blank" title="Screenshot from chat with native location output type">example</a>)
									</span>
								</label>
							</div>
							{* @TODO Currently only internal values
							<div class="form-check">
								{var $outputTypeKey = App\Repository\ChatEntity::OUTPUT_TYPE_FILE_GPX}
								{var $elementId = 'output-type-' . $outputTypeKey}
								<input class="form-check-input" type="radio" name="output-type" value="{$outputTypeKey}" id="{$elementId}" n:attr="checked: $outputTypeKey === $chat->settingsOutputType()">
								<label class="form-check-label" for="{$elementId}">
									File as GPX
									<span class="form-text">
										(File attachment with text and buttons)
									</span>
								</label>
							</div>
							<div class="form-check">
								{var $outputTypeKey = App\Repository\ChatEntity::OUTPUT_TYPE_FILE_KML}
								{var $elementId = 'output-type-' . $outputTypeKey}
								<input class="form-check-input" type="radio" name="output-type" value="{$outputTypeKey}" id="{$elementId}" n:attr="checked: $outputTypeKey === $chat->settingsOutputType()">
								<label class="form-check-label" for="{$elementId}">
									File as KML
									<span class="form-text">
										(File attachment with text and buttons)
									</span>
								</label>
							</div>
							*}
							<div class="form-check">
								{var $outputTypeKey = App\Repository\ChatEntity::OUTPUT_TYPE_SNEAK_BUTTONS}
								{var $elementId = 'output-type-' . $outputTypeKey}
								<input
										class="form-check-input"
										type="radio"
										name="output-type"
										value="{$outputTypeKey}"
										id="{$elementId}"
										n:attr="
											checked: $outputTypeKey === $chat->settingsOutputType(),
											disabled: $chatResponse->type !== App\Repository\ChatEntity::CHAT_TYPE_CHANNEL
										"
								>
								<label class="form-check-label" for="{$elementId}">
									Sneaky buttons
									<span class="form-text">
										(Edit original message by appending buttons to message,
										<a href="{$basePath}/img/message-output-type-sneaky-buttons.png" target="_blank" title="Screenshot from channel with sneaky buttons">example</a>)
										Available to channels only
									</span>
									{if $chatResponse->type === App\Repository\ChatEntity::CHAT_TYPE_CHANNEL}
										<p class="form-text">
											<span n:if="$chat->settingsOutputType() === App\Repository\ChatEntity::OUTPUT_TYPE_SNEAK_BUTTONS && $canBotEditMessagesOfOthers === false" class="text-warning">
												<i class="fa fa-exclamation-triangle"></i>
												<a href="https://t.me/{\App\Config::TELEGRAM_BOT_NAME}" target="_blank" class="text-reset text-decoration-underline">@{\App\Config::TELEGRAM_BOT_NAME}</a>
												must have
												<b>Edit messages of others</b>
												permission.
												<br>
											</span>
											Refreshable location messages (such as live locations) or any type of forwarded message cannot be edited. See
											<a href="https://github.com/DJTommek/better-location/issues/134" target="_blank" title="Github issue #134: Telegram channel - SneakyButtons for refreshable locations">Github issue #134</a>
											for more info or ask in
											<a href="https://t.me/BetterLocationChat" target="_blank" title="Telegram group @BetterLocationChat">@BetterLocationChat</a>.
										</p>
									{/if}
								</label>
							</div>
						</td>
					</tr>
					<tr>
						<td>Text services</td>
						<td class="services-selector-wrapper">
							<input type="hidden" name="text-services-real" class="services-real-input">
							<span class="selector-loading">Loading...</span>
							<select
									id="text-services-selector"
									name="text-services[]"
									multiple
									class="form-select"
									style="display: none"
									data-choices="{json_encode($chatTextChoices)}"
							></select>
						</td>
					</tr>
					<tr>
						<td>Link services</td>
						<td class="services-selector-wrapper">
							<input type="hidden" name="link-services-real" class="services-real-input">
							<span class="selector-loading">Loading...</span>
							<select
									id="link-services-selector"
									name="link-services[]"
									multiple
									class="form-select"
									style="display: none"
									data-choices="{json_encode($chatLinkChoices)}"
							></select>
						</td>
					</tr>
					<tr>
						<td>Drive button services</td>
						<td class="services-selector-wrapper">
							<span class="selector-loading">Loading...</span>
							<input type="hidden" name="button-services-real" class="services-real-input">
							<select
									id="button-services-selector"
									name="button-services[]"
									multiple
									class="form-select"
									style="display: none"
									data-choices="{json_encode($chatButtonChoices)}"
							></select>
						</td>
					</tr>
					<tr>
						<td>Static image service</td>
						<td>
							{$chat->getMessageSettings()->getScreenshotLinkService()::NAME}
						</td>
					</tr>
					<tr n:if="($chatResponse->type === App\Repository\ChatEntity::CHAT_TYPE_SUPERGROUP || $chatResponse->type === App\Repository\ChatEntity::CHAT_TYPE_GROUP)">
						<td>Ignore filter</td>
						<td>
							{foreach $ignoredTelegramSenders as $id => $name}
								{first}
									Ignored senders:
									<ul>
								{/first}
								<li>
									{if str_starts_with($name, '@')}
										<a href="{\App\TelegramCustomWrapper\TelegramHelper::userLink($name)}" target="_blank">{$name}</a>
									{else}
										{$name}
									{/if}
									<small class="text-muted">
										(TG ID <code class="copy-to-clipboard" data-clipboard-text="{$id}" title="Click to copy ID to the clipboard">{$id}</code>)
									</small>
								</li>
								{last}
									</ul>
								{/last}
							{else}
								No senders are on ignore list.
							{/foreach}
							<div class="form-text">
								<p>
									Messages sent from users on this list will be ignored and no location will be processed.<br>
									To add someone to the list, use <code>{\App\TelegramCustomWrapper\Events\Command\IgnoreCommand::getTgCmd(true)}</code> as reply to it's message.<br>
									This settings is available only for groups.
								</p>
							</div>
						</td>
					</tr>
					<tr>
						<td>Pluginer webhook URL</td>
						<td>
							<input type="url" name="pluginer-url" class="form-control" value="{$formPluginerUrl}" placeholder="{\App\Config::getAppUrl('/webhook/pluginer-example.php')}">
							<div class="form-text">
								<p>
									When location in this chat is detected, it will send POST request with JSON to this URL, where you can update some of attributes such as location prefix.<br>
									Example of such script:
									<a href="https://github.com/DJTommek/better-location/blob/master/www/webhook/pluginer-example.php" title="Pluginer example source code Github DJTommek/better-location" target="_blank">source code</a>
									|
									<a href="{\App\Config::getAppUrl('/webhook/pluginer-example.php')}" title="Pluginer example URL" target="_blank">public URL to test</a><br>
									JSON that BetterLocation is sending to you and that you are replying back to BetterLocation must match this
									<a href="https://github.com/DJTommek/better-location/blob/master/src/libs/Pluginer/request.schema.json" target="_blank" title="JSON schema on Github DJTommek/better-location">JSON schema</a>, see
									<a href="https://github.com/DJTommek/better-location/tree/master/tests/Pluginer/fixtures/valid" target="_blank" title="JSON examples on Github DJTommek/better-location">examples here</a>.
								</p>
								<p class="font-weight-bold">
									<i class="fa fa-exclamation-triangle"></i>
									This is experimental feature currently public beta testing, anything can change without further notice. See
									<a href="https://github.com/DJTommek/better-location/issues/117" target="_blank" title="Github issue #117: Pluginer - allow edit location messages">Github issue #117</a>
									for more info or ask in
									<a href="https://t.me/BetterLocationChat" target="_blank" title="Telegram group @BetterLocationChat">@BetterLocationChat</a>.
									Feedback is very much appreciated.
								</p>
							</div>
						</td>
					</tr>
					<tr>
						<td colspan="2" class="text-center">
							<button type="submit" class="btn btn-primary">Save</button>
						</td>
					</tr>
					</tbody>
				</table>
			</div>
			<div class="col-lg">
				{include exampleTelegramMessage}
			</div>
		</form>
	</div>
{/block}

{block title}
	Chat {$telegramChatId}
{/block}

{block local exampleTelegramMessage}
	<div class="example-message card">
		<h4 class="card-header text-center">
			Example message
		</h4>
		<div class="card-body">
			<div class="card-text">
				{$exampleLocation->getPrefixMessage()|noescape}
				<a href="https://en.mapy.cz/screenshoter?url=https%3A%2F%2Fmapy.cz%2Fzakladni%3Fy%3D50.087451%26x%3D14.420671%26source%3Dcoor%26id%3D14.420671%252C50.087451%26p%3D3%26l%3D0" target="_blank">
					{\App\Icons::MAP_SCREEN}
				</a>
				{foreach $chat->getMessageSettings()->getTextServices() as $service}
					{var $serviceText = $service::getShareText($lat, $lon)}
					<code class="copy-to-clipboard" data-clipboard-text="{$serviceText}" title="Click to copy text to clipboard">
						{$serviceText}
					</code>
					{if $iterator->last === false}
						|
					{/if}
				{/foreach}

				<br>
                {foreach $chat->getMessageSettings()->getLinkServices() as $service}
					<a href="{$service::getLink($lat, $lon)}" target="_blank">
						{$service::getName(true)}
					</a>
					{if $iterator->last === false}
						|
					{/if}
				{/foreach}

                {if $chat->settingsShowAddress()}
					<br>{$exampleLocation->getAddress()}
				{/if}
				{foreach $exampleLocation->getDescriptions() as $description}
					<br>{$description|noescape}
				{/foreach}
			</div>
		</div>
		<a n:if="$chat->settingsPreview()" href="https://better-location.palider.cz/api/staticmap.php?id=ad9d66a6c079f762" target="_blank">
			<img loading="lazy" src="https://better-location.palider.cz/api/staticmap.php?id=ad9d66a6c079f762" class="card-img-bottom">
		</a>
		<div n:if="$chat->getMessageSettings()->getButtonServices()" class="card-footer">
			<div class="row telegram-message">
				{foreach $chat->getMessageSettings()->getButtonServices() as $service}
					<div class="col buttons">
						{var $driveLink = $service::getLink($lat, $lon, true)}
						<a href="{$driveLink}" class="btn btn-secondary" target="_blank" data-toggle="tooltip" title="{$driveLink}">
							{$service::getName(true)} {\App\Icons::CAR}
						</a>
					</div>
				{/foreach}
			</div>
		</div>
	</div>
	<script n:syntax=off>
		window.addEventListener('load', function () {
			['text-services-selector', 'link-services-selector', 'button-services-selector'].forEach(function (elementId) {
				console.debug('init choices to element ID #' + elementId)
				const element = document.getElementById(elementId);
				const inputReal = element.parentElement.querySelector('.services-real-input');
				const choicesItems = JSON.parse(element.dataset.choices);
				console.debug(choicesItems);
				const choices = new Choices(element, {
					removeItemButton: true,
					removeItemButtonAlignLeft: true,
					paste: false,
					searchEnabled: false,
					searchChoices: false,
					shouldSort: true,
					itemSelectText: '',
					allowHTML: true,
					noChoicesText: "All available location services are already selected.",
					choices: choicesItems,
				});

				/**
				 * Sync values from selector into hidden input, which keeps order of selected items when submitted to the server.
				 */
				function onChangeValue() {
					const selectedValues = choices.getValue(true);
					inputReal.value = selectedValues.join(',');

					// Remove "No choices to choose from" when it should not be visible
					// @HOTFIX workaround until https://github.com/Choices-js/Choices/issues/1212 is resolved
					if (selectedValues.length !== choicesItems.length) {
						choices._clearNotice();
					}
				}

				element.addEventListener('change', onChangeValue);
				onChangeValue();

				if (elementId === 'link-services-selector') {
					// Force first item (BetterLocation) to be always selected as first in link-services
					element.addEventListener('change', function () {
						const firstItem = choicesItems[0];
						const selectedItems = choices.getValue(true);

						if (
							selectedItems.length === 0
							|| selectedItems[0] !== firstItem.value
							|| selectedItems.includes(firstItem.value) === false
						) {
							flashMessage(firstItem.label + ' service must be always selected on first position.', 'warning');
							choices.removeActiveItems();
							choices.setChoiceByValue([firstItem.value, ...selectedItems]);
						}
					});
				}

				// @HOTFIX Property 'searchEnabled: false' is not working, so it is necessary to remove it manually
				// @see https://github.com/Choices-js/Choices/issues/1202
				element.parentElement.querySelector('input[type=search]').remove();
			});
			[...document.getElementsByClassName('selector-loading')].forEach(function (loadingEl) {
				loadingEl.remove();
			});
		});
	</script>
{/block}

{block cssLibs}
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js@11.0.2/public/assets/styles/choices.min.css" integrity="sha256-g0uAHC+YSeiS2X/1GuQ3OMQkSR0wd82xvcbPtWlOG5I=" crossorigin="anonymous">
{/block}

{block js}
	<script src="https://cdn.jsdelivr.net/npm/choices.js@11.0.2/public/assets/scripts/choices.min.js" integrity="sha256-LEANHJz7is1Js5pEyiuEOrUu2Tcd+hweXXT/DBdC+RQ=" crossorigin="anonymous"></script>
{/block}

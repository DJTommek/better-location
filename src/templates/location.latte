{layout '@layout.latte'}
{block content}
	<div id="content-location">
		<div class="row g-0">
			<div class="col-12 col-md-6 header-left text-center text-md-start">
				<a href="/{$lat},{$lon}">
					<img src="/img/logo.png" alt="Logo">
					BetterLocation
				</a>
			</div>
			<div class="col-12 col-md-6 header-right text-center text-md-end">
				<p class="header-right-coords">
					{$lat},{$lon}
				</p>
			</div>
		</div>
		<div class="row g-0">
			<div class="col-12 col-md-2 col-xl-1" id="most-used-links">
				<div class="row">
					<a href="{$linkGoogle}" target="_blank" class="col" title="Google Maps">
						<img src="/img/icons/google.svg">
					</a>
					<a href="{$linkWaze}" target="_blank" class="col" title="Waze">
						<img src="/img/icons/waze.svg">
					</a>
					<a href="{$linkHere}" target="_blank" class="col" title="HERE WeGo">
						<img src="/img/icons/here.svg">
					</a>
					<a href="{$linkOSM}" target="_blank" class="col" title="Open Street Map">
						<img src="/img/icons/osm.svg">
					</a>
				</div>
			</div>
			<div class="col-12 col-md-10 col-xl-11" id="map-dynamic">
				<div id="map-dynamic-leaflet"></div>
			</div>
		</div>
		<div class="address">
			{$betterLocation->getAddress() ?? 'Unknown address'}
		</div>
		<div class="telegram">
			<a href="{$linkTG}" target="_blank" title="Telegram">
				<i class="fa fa-telegram"></i>
				@BetterLocationBot
			</a>
		</div>
		<div class="websites">
			<table class="table table-nonfluid table-hover table-striped table-sm">
				<thead>
				<tr>
					<th>Service</th>
					<th>Share</th>
					<th>Drive</th>
					<th>Text</th>
				</tr>
				</thead>
				<tbody>
				{foreach $websites as $title => $links}
					{if isset($links['share']) || isset($links['drive']) || isset($links['text'])}
						<tr>
							<td class="service-title">
								<span>
									{$title}
								</span>
							</td>
							<td class="service-share-link">
								{if isset($links['share'])}
									<a href="{$links['share']}" target="_blank">share</a>
								{/if}
							</td>
							<td class="service-drive-link">
								{if isset($links['drive'])}
									<a href="{$links['drive']}" target="_blank">drive</a>
								{/if}
							</td>
							<td class="service-share-text text-nowrap">
								{if isset($links['text'])}
									<span>
										{$links['text']}
									</span>
								{/if}
							</td>
						</tr>
					{/if}
				{/foreach}
				</tbody>
			</table>
		</div>
	</div>
{/block}
{block title}
	{$lat},{$lon}
	{if $betterLocation->getAddress()}
		- {$betterLocation->getAddress()}
	{/if}
{/block}
{block cssLibs}
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
{/block}
{block jsLibs}
	<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
{/block}
{block js}
	<script>
		function distanceHuman(meters) {
			console.log('meters: ' + meters);
			if (meters > 10_000) {
				return Math.floor(meters / 1000) + 'km';
			} else if (meters > 1000) {
				return Math.floor(meters / 10) / 100 + 'km'; // keep rounded to two decimal places
			}
			return Math.floor(meters) + 'm';
		}

		const mapData = {
			map: L.map('map-dynamic-leaflet').setView([{$lat}, {$lon}], 13),
			markers: {
				browserLocation: null,
				pageLocation: null,
			},
			circles: {
				browserLocationAccuracy: null,
			}
		}
		{syntax off}
		L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
			maxZoom: 18,
			attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
			id: 'mapbox/streets-v11',
			tileSize: 512,
			zoomOffset: -1
		}).addTo(mapData.map);
		{/syntax}
		mapData.markers.pageLocation = L.marker([{$lat}, {$lon}]).addTo(mapData.map);

		L.Control.BrowserLocation = L.Control.extend({
			onAdd: function (map) {
				const element = L.DomUtil.create('div', 'current-location');
				element.title = 'Current location';
				element.innerHTML = '<i class="fa fa-dot-circle-o"></i>';
				element.addEventListener('click', function (event) {
					map.locate({
						setView: true,
						maxZoom: 16
					});
				});
				return element;
			},
		});

		L.control.browserLocation = function (options) {
			return new L.Control.BrowserLocation(options);
		}
		L.control.browserLocation({
			position: 'topright'
		}).addTo(mapData.map);
		mapData.map.on('locationfound', function (event) {
			const iconSvg = '<svg width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75 75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73 198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"/></svg>'
			const iconUrl = 'data:image/svg+xml;base64,' + btoa(iconSvg);

			if (mapData.markers.browserLocation === null) {
				mapData.markers.browserLocation = L.marker(event.latlng, {
					icon: L.icon({
						iconUrl: iconUrl,
						iconSize: [20, 20],
						iconAnchor: [10, 10],
					}),
				}).addTo(mapData.map).bindPopup();
				mapData.circles.browserLocationAccuracy = L.circle(event.latlng, event.accuracy).addTo(mapData.map);
			} else {
				mapData.markers.browserLocation.setLatLng(event.latlng);
				mapData.circles.browserLocationAccuracy.setLatLng(event.latlng).setRadius(event.accuracy);
			}
			let popupContent = '<p>';
			const latLon = event.latlng.lat.toFixed(6) + ',' + event.latlng.lng.toFixed(6);
			popupContent += 'Browser location: <b><a href="/' + latLon + '">' + latLon + '</a></b> (accuracy <b>' + distanceHuman(event.accuracy) +'</b>)';
			popupContent += '<br>Distance to currently opened location: <b>' + distanceHuman(event.latlng.distanceTo(mapData.markers.pageLocation.getLatLng())) + '</b>';
			mapData.markers.browserLocation.getPopup().setContent(popupContent).openPopup();
			mapData.markers.browserLocation.openPopup();
		}).on('locationerror', function (event) {
			let result = 'Your location couldn\'t be loaded: ';
			switch(event.code) {
				case GeolocationPositionError.PERMISSION_DENIED:
					result += 'permission denied.';
					break;
				case GeolocationPositionError.POSITION_UNAVAILABLE:
					result += 'not supported.';
					break;
				case GeolocationPositionError.TIMEOUT:
					result += 'took too long. Try again later.';
					break;
				default:
					result += 'unknown error.';
					break;
			}
			alert(result);
		});
	</script>
{/block}

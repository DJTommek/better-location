{templateType App\Web\Locations\LocationsTemplate}
{layout '@layout.latte'}
{block content}
	<div id="content-locations">
		<div class="row g-0">
			<div class="col-12 col-md-6 header-left text-center text-md-start">
				<!-- @TODO -->
			</div>
			<div class="col-12 col-md-6 header-right text-center text-md-end">
				<!-- @TODO -->
			</div>
		</div>

		<div class="accordion" id="accordionLocations" n:if="count($distances) > 1">
			{embed
				'locations.distances.latte'
				locations: $locations,
				distances: $distances,
				distanceSmallest: $distanceSmallest,
				distanceGreatest: $distanceGreatest,
			}{/embed}
		</div>

		<div class="row g-0">
			<div class="col-12 col-md-4 col-xl-3" id="tab-locations">
				<div class="list-group" role="tablist">
					{foreach $locations as $location}
						<button
								id="list-group-item-location-{$location->hash}"
								class="list-group-item list-group-item-action {$iterator->first ? 'active'}"
								data-bs-toggle="list"
								data-location="{$location->hash}"
								href="#content-locations-{$location->hash}"
								role="tab"
								title="{$location->address}"
						>
							<div class="d-flex">
								<div n:if="$login->isLogged()" class="favourite">
									{if $user->getFavourite($location->lat, $location->lon) !== null}
										<a href="{$basePath}/{$location->lat},{$location->lon}?action=delete" title="Remove from favourites" class="text-danger">
											<i class="fa fa-fw icon-heart"></i>
										</a>
									{else}
										<a href="{$basePath}/{$location->lat},{$location->lon}?action=add" title="Add to favourites" class="text-danger">
											<i class="fa fa-fw icon-heart-o"></i>
										</a>
									{/if}
								</div>
								<div>
									{if $iterator->count() > 1}
										{$iterator->counter}:
									{/if}
									{$location->titleHtml}
								</div>
								<div class="ms-auto">
									<a href="{$basePath}/{$location->latLon}" target="_blank">
										<i class="fa fa-external-link"></i>
									</a>
								</div>
							</div>
						</button>
					{/foreach}
				</div>
				<div class="downloads text-center">
					<i class="fa fa-download"></i> Download all as
					<a href="{$basePath}/{$locationsKeys|join:';'}?format=json" target="_blank">json</a> |
					<a href="{$basePath}/{$locationsKeys|join:';'}?format=gpx">gpx</a> |
					<a href="{$basePath}/{$locationsKeys|join:';'}?format=kml">kml</a>
				</div>
			</div>
			<div class="col-12 col-md-8 col-xl-9" id="map-dynamic">
				<div id="map-dynamic-leaflet"></div>
			</div>
		</div>

		<div class="tab-content">
			{foreach $locations as $location}
				<div id="content-locations-{$location->hash}" class="tab-pane fade {$iterator->first ? 'show active'}" role="tabpanel">
					<div class="text-center">
						<div class="address address-to-fill address-to-fill-{$location->hash}">
							{if $location->hasAddress}
								{$location->address}
							{else}
								<i class="fa fa-circle-o-notch fa-spin"></i> Loading address...
							{/if}
						</div>

						<div class="timezone">
							{if $showingTimezoneData}
								{if $location->timezoneData}
									Local time: <b title="YYYY-MM-DD hh:mm:ss. Time might be few minutes out of date due to caching.">{$location->timezoneData->time->format(\App\Config::DATETIME_FORMAT)}</b>,
																																																			   Timezone: <b>{$location->timezoneData->timezone->getName()}</b>,
									<abbr title="Coordinated Universal Time">UTC</abbr> Offset: <b>{$location->timezoneData->formatNowOffset()}</b>,
									<abbr title="Daylight saving time">DST</abbr>: <b>{$location->timezoneData->isDst() ? 'yes' : 'no'}</b>
								{else}
									DateTimezone data are not available.
								{/if}
							{else}
								<a href="{$basePath}/{$location->latLon}?datetimezone=true">Load timezone data</a>
							{/if}
						</div>
						<div class="downloads">
							<i class="fa fa-download"></i> Download as
							<a href="{$basePath}/{$location->latLon}?format=json" target="_blank">json</a> |
							<a href="{$basePath}/{$location->latLon}?format=gpx">gpx</a> |
							<a href="{$basePath}/{$location->latLon}?format=kml">kml</a>
						</div>
						<div class="elevation" n:if="$location->elevation !== null">
							<abbr title="Above mean sea level">AMSL</abbr>: {$location->elevation} meters
						</div>
						<div class="telegram">
							<a href="{App\TelegramCustomWrapper\TelegramHelper::generateStartLocation($location->lat, $location->lon)}" target="_blank" title="Telegram">
								<i class="fa fa-telegram"></i>
								@BetterLocationBot
							</a>
						</div>
					</div>
					<div class="websites table-responsive">
						<table class="table table-nonfluid table-hover table-striped table-sm">
							<thead>
							<tr>
								<th>Service</th>
								<th>Share</th>
								<th>Drive</th>
								<th>Text</th>
							</tr>
							</thead>
							<tbody>
							{foreach $websites[$location->latLon] as $service}
								{if isset($service['share']) || isset($service['drive']) || isset($service['text'])}
									<tr>
										<td class="service-title">
								<span>
									{$service['name']}
								</span>
										</td>
										<td class="service-share-link">
											{if isset($service['share'])}
												<a href="{$service['share']}" target="_blank">share</a>
											{/if}
										</td>
										<td class="service-drive-link">
											{if isset($service['drive'])}
												<a href="{$service['drive']}" target="_blank">drive</a>
											{/if}
										</td>
										<td class="service-share-text text-nowrap">
											{if isset($service['text'])}
												<i class="fa fa-fw fa-clipboard copy-to-clipboard" data-clipboard-text="{$service['text']}" title="Copy text to clipboard"></i>
												{$service['text']}
											{/if}
										</td>
									</tr>
								{/if}
							{/foreach}
							</tbody>
						</table>
					</div>
				</div>
			{/foreach}
		</div>
	</div>
{/block}

{block title}
	{if count($locations) === 1}
		{var $location = $locations[0]}
		{if $location->hasAddress}
			{$location->address} -
		{/if}
		{$location->latLon}
	{else}
		{count($locations)} locations
	{/if}
{/block}
{block cssLibs}
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@v0.74.0/dist/L.Control.Locate.min.css"/>
	<link rel="stylesheet" href="{$basePath}/libs/leaflet.fullscreen-3.0.2/Control.FullScreen.css">
{/block}
{block jsLibs}
	<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
	<script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@v0.74.0/dist/L.Control.Locate.min.js" charset="utf-8"></script>
	<script src="{$basePath}/libs/leaflet.fullscreen-3.0.2/Control.FullScreen.js"></script>
{/block}
{block js}
	<script>
		function distanceHuman(meters) {
			if (meters > 10_000) {
				return Math.floor(meters / 1000) + 'km';
			} else if (meters > 1000) {
				return Math.floor(meters / 10) / 100 + 'km'; // keep rounded to two decimal places
			}
			return Math.floor(meters) + 'm';
		}

		const locations = {$locationsJs};
		const listGroupTabs = {};
		const mapyCzApiKey = {$mapyCzApiKey};
		const mapData = {
			map: null,
			markers: {
				browserLocation: null,
				locations: {},
			},
			circles: {
				browserLocationAccuracy: null,
			},
			icons: {
				active: L.icon({
					iconUrl: {$basePath} +'/img/icons/marker-icon-active.png',
					iconSize: [25, 41],
					iconAnchor: [13, 41],
				}),
				inactive: L.icon({
					iconUrl: {$basePath} +'/img/icons/marker-icon-inactive.png',
					iconSize: [25, 41],
					iconAnchor: [13, 41],
				}),
			},
			layers: {
				{syntax off}
				baseLayers: {
					'OSM default': L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
						maxZoom: 19,
						attribution: 'copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
					}),
					'Waze default': L.tileLayer('https://worldtiles{s}.waze.com/tiles/{z}/{x}/{y}.png', {
						minZoom: 2,
						maxZoom: 18,
						attribution: '<a href="https://www.waze.com/legal/tos" target="_blank" rel="noopener">Waze</a>',
						tileSize: 256,
						zoomOffset: 0,
						subdomains: '1234',
					}),
					'Mapy.cz base': L.tileLayer('https://api.mapy.cz/v1/maptiles/basic/256/{z}/{x}/{y}?apikey=' + mapyCzApiKey, {
						minZoom: 0,
						maxZoom: 19,
						attribution: '<a href="https://api.mapy.cz/copyright" target="_blank">&copy; Seznam.cz a.s. a další</a>',
					}),
					'Mapy.cz base (alternative)': L.tileLayer('https://palider.cz/api/map-server/mapy-cz/base-en/{z}/{x}/{y}', {
						minZoom: 0,
						maxZoom: 19,
						attribution: '<a href="https://o.seznam.cz" target="_blank" rel="noopener">Seznam.cz, a.s.</a>',
					}),
					'Mapy.cz hiking': L.tileLayer('https://api.mapy.cz/v1/maptiles/outdoor/256/{z}/{x}/{y}?apikey=' + mapyCzApiKey, {
						minZoom: 0,
						maxZoom: 19,
						attribution: '<a href="https://api.mapy.cz/copyright" target="_blank">&copy; Seznam.cz a.s. a další</a>',
					}),
					'Mapy.cz hiking (alternative)': L.tileLayer('https://palider.cz/api/map-server/mapy-cz/turist-m/{z}/{x}/{y}', {
						minZoom: 0,
						maxZoom: 19,
						attribution: '<a href="https://o.seznam.cz" target="_blank" rel="noopener">Seznam.cz, a.s.</a>',
					}),
				},
				{/syntax}
			}
		}
		$(function () {
			mapData.map = L.map('map-dynamic-leaflet', {
				fullscreenControl: true,
			}).setView(locations[0]['coords'], 13);
			mapData.map.fitBounds(new L.LatLngBounds({$allCoords}), {'maxZoom': 13});

			const baseLayer = Settings.load('dynamicMapBaseLayer');
			if (baseLayer in mapData.layers.baseLayers) {
				mapData.layers.baseLayers[baseLayer].addTo(mapData.map);
			} else {
				mapData.layers.baseLayers['OSM default'].addTo(mapData.map);
			}
			L.control.layers(mapData.layers.baseLayers, mapData.layers.overlays).addTo(mapData.map);

			mapData.map.on('baselayerchange', function (event) {
				Settings.save('dynamicMapBaseLayer', event.name);
			}).on('click', function (event) {
				const locationKey = BlbUtils.locationKey(event.latlng);
				const marker = L.marker(event.latlng);
				let popupContent = '<p>';
				popupContent += 'Coordinates: <b><a href="' + {$basePath} +'/' + locationKey + '">' + locationKey + '</a></b>';
				popupContent += ' <i class="fa fa-fw fa-clipboard copy-to-clipboard" data-clipboard-text="' + locationKey + '" title="Copy coordinates to clipboard"></i>';
				popupContent += '<br>';
				popupContent += '<a href="' + {$basePath} +'/' + {$locationsKeys|join:';'} +';' + locationKey + '">Add this point to list</a>';
				popupContent += '</p>';
				marker.bindPopup(popupContent)
					.addTo(mapData.map)
					.openPopup();
			});

			locations.forEach(function (location, index) {
				const isFirst = (index === 0);

				listGroupTabs[location.hash] = new bootstrap.Tab($('#list-group-item-location-' + location.hash)[0]);

				const marker = L.marker(
					[location.lat, location.lon],
					{
						icon: isFirst ? mapData.icons.active : mapData.icons.inactive,
					}
				);
				let popupContent = '<p>';
				popupContent += 'Coordinates: <b><a href="' + {$basePath} +'/' + location.key + '">' + location.key + '</a></b>';
				popupContent += ' <i class="fa fa-fw fa-clipboard copy-to-clipboard" data-clipboard-text="' + location.key + '" title="Copy coordinates to clipboard"></i>';
				popupContent += '<br>';
				popupContent += 'Address: <b>' + (location.address ?? 'Unknown address') + '</b>';
				popupContent += '</p>';
				marker.bindPopup(popupContent, {
					offset: [0, -30],
				});
				marker.on('popupopen', function (event) {
					listGroupTabs[location.hash].show();
					for (const [locationMarkerTempHash, locationMarkerTemp] of Object.entries(mapData.markers.locations)) {
						if (locationMarkerTempHash === location.hash) {
							locationMarkerTemp.setIcon(mapData.icons.active);
						} else {
							locationMarkerTemp.setIcon(mapData.icons.inactive);
						}
					}
				});
				marker.addTo(mapData.map);
				mapData.markers.locations[location.hash] = marker;
			});

			const locateControl = L.control.locate({
				setView: false,
				strings: {
					popup: function (params) {
						const markerLatLng = locateControl._marker.getLatLng();
						const latLon = markerLatLng.lat.toFixed(6) + ',' + markerLatLng.lng.toFixed(6);
						let popupContent = '<p>';
						popupContent += 'Browser location: <b><a href="' + {$basePath} +'/' + latLon + '">' + latLon + '</a></b> (accuracy <b>' + distanceHuman(params.distance) + '</b>)';
						return popupContent;
					}
				}
			}).addTo(mapData.map);

			// If access to browser location is granted, show it in the map automatically but without pan and zoom
			navigator.permissions.query({
				name: 'geolocation',
			}).then(function (result) {
				if (result.state === 'granted') {
					locateControl.start();
				}
			});

			$('#tab-locations .list-group-item').on('show.bs.tab', function (event) {
				const locationHash = $(this).data('location');
				console.log('Opening popup for location ' + locationHash);
				mapData.markers.locations[locationHash].openPopup();
			});

			// Load more info after page is loaded, so page can be loaded quickly.
			// Some data from third-party APIs takes noticeable time to load (eg address)
			const currentUrl = new URL(window.location.href);
			currentUrl.searchParams.set('format', 'json');
			currentUrl.searchParams.set('address', 'true');
			$.ajax({
				url: currentUrl,
				success: function (response) {
					for (const location of response.locations) {
						const addressToFindClass = 'address-to-fill';
						const addressHtmlKey = addressToFindClass + '-' + location.hash;
						console.log(addressHtmlKey);
						$('.' + addressHtmlKey)
							.text(location.address ?? 'Unknown address...')
							.removeClass(addressToFindClass)
							.removeClass(addressHtmlKey);
					}
				}
			});
		});
	</script>
{/block}
